<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on Ananke</title>
    <link>https://quanzhidou.github.io/tags/leetcode/</link>
    <description>Recent content in Leetcode on Ananke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Jun 2022 20:18:18 +0800</lastBuildDate><atom:link href="https://quanzhidou.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>豆豆的刷题日记（1）</title>
      <link>https://quanzhidou.github.io/post/chapter-8/</link>
      <pubDate>Thu, 16 Jun 2022 20:18:18 +0800</pubDate>
      
      <guid>https://quanzhidou.github.io/post/chapter-8/</guid>
      <description>递归的魔力（1）——leetcode__206反转链表 leetcode-206 反转链表
第一步：明确函数定义，reverseList(head *ListNode) *ListNode，这个reverseList函数的定义为：将头节点为head的链表反转，返回链表反转后的头节点
第二步：明确递归的终点：递归的终点就是当节点head为nil或者head.next为nil时返回head
第三步：开始递归：last := reverseList(head.Next)
如图所示，第三步的程序的意思就是将以2为头节点的链表反转，执行完毕后如图
第四步，执行完第三步的代码后，链表结构变成上图所示，然后将head.next节点指向head即可， head.Next.Next = head
第五步，将head节点的next置为空，返回原链表的末尾节点last
go语言代码 func reverseList(head *ListNode) *ListNode { if head == nil || head.Next == nil { return head } res := reverseList(head.Next) head.Next.Next = head head.Next = nil return res } </description>
    </item>
    
  </channel>
</rss>
