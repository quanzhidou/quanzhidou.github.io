<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DataStruct on Ananke</title>
    <link>https://quanzhidou.github.io/tags/datastruct/</link>
    <description>Recent content in DataStruct on Ananke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Aug 2022 15:16:50 +0800</lastBuildDate><atom:link href="https://quanzhidou.github.io/tags/datastruct/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二叉树</title>
      <link>https://quanzhidou.github.io/post/chapter20/</link>
      <pubDate>Wed, 03 Aug 2022 15:16:50 +0800</pubDate>
      
      <guid>https://quanzhidou.github.io/post/chapter20/</guid>
      <description>回炉重造数据结构——二叉树 二叉树的定义 二叉树是n个节点的有限集合。该集合或者为空集（成为空二叉树），或者由一个根节点和两棵互不相交的、分别称为根节点的左子树和右子树的二叉树组成
二叉树的特点 每个节点最多有两棵子树，所以二叉树中不存在度大于2的节点。
左子树和右子树是有顺序的，次序不能任意颠倒
即使树中某节点只有一棵子树，爷爷要区分他是左子树还是右子树
二叉树的五种形态 空二叉树
只有一个根节点
根节点只有左子树
根节点只有右子树
根节点既有左子树又有右子树
特殊二叉树 斜树
所有的节点都只有左子树的二叉树叫左斜树；所有节点都只有右子树的二叉树叫右斜树
满二叉树
在一棵二叉树中，如果所有的分支节点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树
完全二叉树
对一棵具有n个节点的二叉树按层序编号，如果编号为i（1≤i≤n）的节点与同样深度的满二叉树中编号为i的节点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树
二叉树的性质 性质1
在二叉树的第i层至多有2^(i-1)个节点
性质2
深度为k的二叉树至多有2^i-1个节点
性质3
对任何一棵二叉树T，如果齐终端节点数为n0，都为2的节点数为n2，则n0=n2+1
性质4
具有n个节点的完全二叉树的深度为⌊log2n⌋ + 1
性质5
如果对一颗有n个节点的完全二叉树的节点按层序编号，对任意节点i有：
如果i=1，则节点i是二叉树的根，无双亲；如果i&amp;gt;1则其双亲是节点⌊i/2⌋
如果2i&amp;gt;n，则节点无左孩子（节点i为叶子节点）；否则其左孩子是节点2i
如果2i+1&amp;gt;n，则节点无右孩子；否则其有孩子是节点2i+1
二叉树的存储结构 由于顺序存储结构不适用于二叉树这种树状数据结构，所以我们要考虑链式存储结构，二叉树的每个节点最多又两个孩子，所以为他设计一个数据域和两个指针域时比较自然的想法，我们称这样的链表叫做二叉链表
type BiTNode struct { data string lchild *BiTNode rchild *BiTNode } 二叉树遍历 前序遍历 规则是若二叉树为空，则空操作返回，否则先访问根节点，然后前序遍历左子树，在前序遍历右子树。
func preOrderTraverse(node *BiTNode) { if node == nil { return } fmt.Printf(&amp;#34;%s&amp;#34;, node.data) preOrderTraverse(node.lchild) preOrderTraverse(node.rchild) } 中序遍历 规则是若二叉树为空，则空操作返回，否则从根节点开始，中序遍历左子树，然后访问根节点，在中序遍历右子树。</description>
    </item>
    
    <item>
      <title>KMP算法</title>
      <link>https://quanzhidou.github.io/post/chapter-19/</link>
      <pubDate>Tue, 19 Jul 2022 23:11:43 +0800</pubDate>
      
      <guid>https://quanzhidou.github.io/post/chapter-19/</guid>
      <description>回炉重造数据结构之——KMP算法 原理：暴力匹配有很大的弊端，当发生某个字符匹配不到的时候，主串的索引i与模式串的索引j都要回溯，可是每次匹配时，索引j前面的模式串已经匹配过了，根据这个匹配结果，主串的索引i就可以避免回溯，在进行匹配之前，我们需要对模式串进行处理，求出模式串中每一个位置的前缀与后缀相等的最大长度。
获取next数组代码
func getNext(t string) []int{ next := make([]int, 0) next = append(next, 0) i, prefixLen := 1, 0 //prefixLen为最大公共前后缀长度，初始为0 for i &amp;lt; len(t){ if t[prefixLen] == t[i]{//如果匹配上最大公共前后缀长度+1，并记录到next中 prefixLen++ next = append(next, prefixLen) i++ }else{ if prefixLen == 0{ next = append(next, 0) i++ }else{ prefixLen = next[prefixLen - 1] } } } } KMP
func KMP(s, t string) int{ next := getNext(t) i, j := 0, 0 for i &amp;lt; len(s) &amp;amp;&amp;amp; j &amp;lt; len(t){ if s[i] == t[j]{ i++ j++ }else if j &amp;gt; 0{ j = next[j - 1] }else{ i++ } } if j &amp;gt;= len(t) { return i - j } else { return -1 } } </description>
    </item>
    
  </channel>
</rss>
